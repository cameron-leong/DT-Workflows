{
  "id": "7daf2bef-2421-46c1-8b7c-bb4133375bb6",
  "title": "Update ServiceNow password",
  "tasks": {
    "update_pw": {
      "name": "update_pw",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "/*\nThis action goes trough each ServiceNow problem notification and if the tenant\nis the one defined in the snowTenant variable, it will replace the existing user and password with\nthe ones defined in the newUser and newPassword variables.\n*/\n\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { settingsObjectsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\nconst newPassword = \"myNewPassword!\"\nconst newUser = \"myNewUser\"\nconst snowTenant = \"mySnowTenant\"\nlet failed = []\nlet updated = []\n\nasync function update_password(notification){\n  /*Validate the tenant\n    Format the updated body\n    Update the configuration\n    */\n  if(notification.instance != snowTenant){\n    return\n  }\n  \n  let original_body = await settingsObjectsClient.getSettingsObjectByObjectId({\n    objectId: notification.objectId\n  })\n  \n  let updated_body = {\n    \"schemaVersion\": \"1.6\",\n    \"updateToken\": original_body.updateToken,\n    \"value\": {\n      \"enabled\": original_body.value.enabled,\n      \"type\": \"SERVICE_NOW\",\n      \"displayName\": `${original_body.value.displayName}`,\n      \"serviceNowNotification\": {\n        \"instanceName\": original_body.value.serviceNowNotification.instanceName,\n        \"url\": original_body.value.serviceNowNotification.url,\n        \"username\": newUser,\n        \"password\": newPassword,\n        \"message\": original_body.value.serviceNowNotification.message,\n        \"sendIncidents\": original_body.value.serviceNowNotification.sendIncidents,\n        \"sendEvents\": original_body.value.serviceNowNotification.sendEvents,\n        \"formatProblemDetailsAsText\": original_body.value.serviceNowNotification.formatProblemDetailsAsText\n      },\n      \"alertingProfile\": original_body.value.alertingProfile\n    }\n  }\n  console.log(\"Updating \", updated_body.value.displayName)\n  try{\n    let updated_data = await settingsObjectsClient.putSettingsObjectByObjectId({\n      objectId: notification.objectId,\n      body: updated_body\n    })\n    console.log(\"update successful\")\n    updated.push(updated_body.value.displayName)\n  } catch(error){\n    console.log(error)\n    failed.push(updated_body.value.displayName)\n  }\n  return\n}\n\nfunction pause(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default async function ({ execution_id }) {\n  // your code goes here\n  // e.g. get the current execution\n  const ex = await execution(execution_id);\n  const notifications = await ex.result('get_notifications')\n  for(let i=0; i<notifications.length; i++){\n    let update_data = update_password(notifications[i])\n    if ((i+1) % 50 == 0) {\n      console.log(\"Pausing for 5s\")\n      await pause(5000); // Pause for 10 seconds to account for API limits\n    }\n  }\n  return{\n    updated: updated,\n    failed: failed\n  }\n}"
      },
      "position": {
        "x": 0,
        "y": 2
      },
      "predecessors": [
        "get_notifications"
      ],
      "conditions": {
        "states": {
          "get_notifications": "OK"
        }
      }
    },
    "get_notifications": {
      "name": "get_notifications",
      "action": "dynatrace.automations:run-javascript",
      "description": "Build a custom task running js Code",
      "input": {
        "script": "// This action gets a list of all ServiceNow problem notifications\n\nimport { execution } from '@dynatrace-sdk/automation-utils';\nimport { settingsObjectsClient } from \"@dynatrace-sdk/client-classic-environment-v2\";\n\n\nexport default async function ({ execution_id }) {\n  let return_data = []\n  let notifications = await settingsObjectsClient.getSettingsObjects({\n    schemaIds: \"builtin:problem.notifications\",\n    filter: \"value.type='SERVICE_NOW'\",\n    pageSize: 500\n  })\n  notifications = notifications.items\n  for(let i=0; i<notifications.length; i++){\n    return_data.push({\n      name: notifications[i].value.displayName,\n      instance: notifications[i].value.serviceNowNotification.instanceName,\n      objectId: notifications[i].objectId\n    })\n  }\n  return return_data\n}"
      },
      "active": true,
      "position": {
        "x": 0,
        "y": 1
      },
      "predecessors": []
    }
  },
  "description": "",
  "actor": "ca05eb33-3574-4bdf-a5b4-87b4e9f77ed6",
  "owner": "ca05eb33-3574-4bdf-a5b4-87b4e9f77ed6",
  "ownerType": "USER",
  "isPrivate": true,
  "trigger": {},
  "schemaVersion": 3,
  "type": "STANDARD"
}
